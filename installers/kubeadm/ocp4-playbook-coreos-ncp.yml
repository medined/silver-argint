---
###############################################################################
#
# Ansible Playbook for NIST National Checklist for Red Hat Enterprise Linux CoreOS
#
# Profile Description:
# This compliance profile reflects the core set of security
# related configuration settings for deployment of Red Hat Enterprise
# Linux CoreOS into U.S. Defense, Intelligence, and Civilian agencies.
# Development partners and sponsors include the U.S. National Institute
# of Standards and Technology (NIST), U.S. Department of Defense,
# the National Security Agency, and Red Hat.
# This baseline implements configuration requirements from the following
# sources:
# - Committee on National Security Systems Instruction No. 1253 (CNSSI 1253)
# - NIST Controlled Unclassified Information (NIST 800-171)
# - NIST 800-53 control selections for Moderate-Impact systems (NIST 800-53)
# - U.S. Government Configuration Baseline (USGCB)
# - NIAP Protection Profile for General Purpose Operating Systems v4.2.1 (OSPP v4.2.1)
# - DISA Operating System Security Requirements Guide (OS SRG)
# For any differing configuration requirements, e.g. password lengths, the stricter
# security setting was chosen. Security Requirement Traceability Guides (RTMs) and
# sample System Security Configuration Guides are provided via the
# scap-security-guide-docs package.
# This profile reflects U.S. Government consensus content and is developed through
# the ComplianceAsCode initiative, championed by the National
# Security Agency. Except for differences in formatting to accommodate
# publishing processes, this profile mirrors ComplianceAsCode
# content as minor divergences, such as bugfixes, work through the
# consensus and release processes.
#
# Profile ID:  coreos-ncp
# Benchmark ID:  OCP-4
# Benchmark Version:  0.1.51
# XCCDF Version:  1.1
#
# This file was generated by OpenSCAP 1.3.3 using:
# $ oscap xccdf generate fix --profile coreos-ncp --fix-type ansible xccdf-file.xml
#
# This Ansible Playbook is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this Ansible Playbook:
# $ ansible-playbook -i "localhost," -c local playbook.yml
# $ ansible-playbook -i "192.168.1.155," playbook.yml
# $ ansible-playbook -i inventory.ini playbook.yml
#
###############################################################################

- hosts: all
  vars:
    sysctl_net_ipv4_conf_default_log_martians_value: !!str 1
    sysctl_net_ipv4_icmp_ignore_bogus_error_responses_value: !!str 1
    sysctl_net_ipv4_conf_default_secure_redirects_value: !!str 0
    sysctl_net_ipv4_conf_all_accept_redirects_value: !!str 0
    sysctl_net_ipv4_conf_all_log_martians_value: !!str 1
    sysctl_net_ipv4_conf_all_accept_source_route_value: !!str 0
    sysctl_net_ipv4_icmp_echo_ignore_broadcasts_value: !!str 1
    sysctl_net_ipv4_conf_all_rp_filter_value: !!str 1
    sysctl_net_ipv4_conf_all_secure_redirects_value: !!str 0
    sysctl_net_ipv4_conf_default_accept_redirects_value: !!str 0
    sysctl_net_ipv4_tcp_syncookies_value: !!str 1
    sysctl_net_ipv4_conf_default_rp_filter_value: !!str 1
    sysctl_net_ipv4_conf_default_accept_source_route_value: !!str 0
    sysctl_net_ipv6_conf_default_accept_redirects_value: !!str 0
    sysctl_net_ipv6_conf_default_accept_ra_value: !!str 0
    sysctl_net_ipv6_conf_all_accept_redirects_value: !!str 0
    sysctl_net_ipv6_conf_all_accept_ra_value: !!str 0
    sysctl_net_ipv6_conf_default_accept_source_route_value: !!str 0
    sysctl_net_ipv6_conf_all_accept_source_route_value: !!str 0
  tasks:
    - name: Disable service debug-shell
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service debug-shell
          systemd:
            name: debug-shell.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"debug-shell.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_debug-shell_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82496-1
        - NIST-800-171-3.4.5

    - name: Unit Socket Exists - debug-shell.socket
      command: systemctl list-unit-files debug-shell.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_debug-shell_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82496-1
        - NIST-800-171-3.4.5

    - name: Disable socket debug-shell
      systemd:
        name: debug-shell.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"debug-shell.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_debug-shell_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82496-1
        - NIST-800-171-3.4.5

    - name: require single user mode password
      lineinfile:
        create: true
        dest: /usr/lib/systemd/system/rescue.service
        regexp: ^#?ExecStart=
        line: ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block
          default"
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - require_singleuser_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82550-5
        - NIST-800-53-IA-2
        - NIST-800-53-AC-3
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.4.5

    - name: Ensure audit is installed
      package:
        name: audit
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_audit_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82669-3
        - NIST-800-53-AC-7(a)
        - NIST-800-53-AU-7(1)
        - NIST-800-53-AU-7(2)
        - NIST-800-53-AU-14
        - NIST-800-53-AU-12(2)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-CM-6(a)

    - name: Enable service auditd
      block:

        - name: Gather the package facts
          package_facts:
            manager: auto

        - name: Enable service auditd
          service:
            name: auditd
            enabled: 'yes'
            state: started
          when:
            - '"audit" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_auditd_enabled
        - high_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82463-1
        - NIST-800-53-AC-2(g)
        - NIST-800-53-AU-3
        - NIST-800-53-AU-10
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AU-14(1)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.3.1
        - NIST-800-171-3.3.2
        - NIST-800-171-3.3.6
        - PCI-DSS-Req-10.1
        - CJIS-5.4.1.1

    - name: Search /etc/audit/rules.d for audit rule entries for sysadmin actions
      find:
        paths: /etc/audit/rules.d
        recurse: false
        contains: ^.*/etc/sudoers.*$
        patterns: '*.rules'
      register: find_audit_sysadmin_actions
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Use /etc/audit/rules.d/actions.rules as the recipient for the rule
      set_fact:
        all_sysadmin_actions_files:
          - /etc/audit/rules.d/actions.rules
      when:
        - find_audit_sysadmin_actions.matched is defined and find_audit_sysadmin_actions.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Use matched file as the recipient for the rule
      set_fact:
        all_sysadmin_actions_files:
          - '{{ find_audit_sysadmin_actions.files | map(attribute=''path'') | list | first
            }}'
      when:
        - find_audit_sysadmin_actions.matched is defined and find_audit_sysadmin_actions.matched
          > 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers rule in rules.d
      lineinfile:
        path: '{{ all_sysadmin_actions_files[0] }}'
        line: -w /etc/sudoers -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers.d rule in rules.d
      lineinfile:
        path: '{{ all_sysadmin_actions_files[0] }}'
        line: -w /etc/sudoers.d/ -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: -w /etc/sudoers -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Inserts/replaces audit rule for /etc/sudoers.d in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: -w /etc/sudoers.d/ -p wa -k actions
        create: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_sysadmin_actions
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82613-1
        - NIST-800-53-AC-2(7)(b)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.2
        - PCI-DSS-Req-10.2.5.b
        - CJIS-5.4.1.1

    - name: Collect all files from /etc/audit/rules.d with .rules extension
      find:
        paths: /etc/audit/rules.d/
        patterns: '*.rules'
      register: find_rules_d
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_immutable
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - reboot_required
        - CCE-82668-5
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.3.1
        - NIST-800-171-3.4.3
        - PCI-DSS-Req-10.5.2
        - CJIS-5.4.1.1

    - name: Remove the -e option from all Audit config files
      lineinfile:
        path: '{{ item }}'
        regexp: ^\s*(?:-e)\s+.*$
        state: absent
      loop: '{{ find_rules_d.files | map(attribute=''path'') | list + [''/etc/audit/audit.rules'']
        }}'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_immutable
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - reboot_required
        - CCE-82668-5
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.3.1
        - NIST-800-171-3.4.3
        - PCI-DSS-Req-10.5.2
        - CJIS-5.4.1.1

    - name: Add Audit -e option into /etc/audit/rules.d/immutable.rules and /etc/audit/audit.rules
      lineinfile:
        path: '{{ item }}'
        create: true
        line: -e 2
      loop:
        - /etc/audit/audit.rules
        - /etc/audit/rules.d/immutable.rules
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_immutable
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - reboot_required
        - CCE-82668-5
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.3.1
        - NIST-800-171-3.4.3
        - PCI-DSS-Req-10.5.2
        - CJIS-5.4.1.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_open_o_trunc_write
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82645-3
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_openat_o_trunc_write
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82636-2
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82621-4
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at_o_trunc_write
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82642-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at_o_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82641-2
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_openat_o_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82635-4
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Add unsuccessful file operations audit rules
      blockinfile:
        path: /etc/audit/rules.d/30-ospp-v42-remediation.rules
        create: true
        block: |-
          ## This content is a section of an Audit config snapshot recommended for Red Hat OpenShift Container Platform 4 systems that target OSPP compliance.
          ## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

          ## The purpose of these rules is to meet the requirements for Operating
          ## System Protection Profile (OSPP)v4.2. These rules depends on having
          ## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

          ## Unsuccessful file creation (open with O_CREAT)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S open -F a1&0100 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create
          -a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-create

          ## Unsuccessful file modifications (open for write or truncate)
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S open -F a1&01003 -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification
          -a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-modification

          ## Unsuccessful file access (any other opens) This has to go last.
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
          -a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=unset -F key=unsuccesful-access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_unsuccessful_file_modification_open_o_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82644-6
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82616-4
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for settimeofday for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82616-4
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for settimeofday for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - settimeofday

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_settimeofday
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82616-4
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for stime syscall for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - stime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - stime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_stime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82617-2
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Check if watch rule for /etc/localtime already exists in /etc/audit/rules.d/
      find:
        paths: /etc/audit/rules.d
        contains: ^\s*-w\s+/etc/localtime\s+-p\s+wa(\s|$)+
        patterns: '*.rules'
      register: find_existing_watch_rules_d
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Search /etc/audit/rules.d for other rules with specified key audit_time_rules
      find:
        paths: /etc/audit/rules.d
        contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
        patterns: '*.rules'
      register: find_watch_key
      when:
        - find_existing_watch_rules_d.matched is defined and find_existing_watch_rules_d.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/audit_time_rules.rules
      when:
        - find_watch_key.matched is defined and find_watch_key.matched == 0 and find_existing_watch_rules_d.matched
          is defined and find_existing_watch_rules_d.matched == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - '{{ find_watch_key.files | map(attribute=''path'') | list | first }}'
      when:
        - find_watch_key.matched is defined and find_watch_key.matched > 0 and find_existing_watch_rules_d.matched
          is defined and find_existing_watch_rules_d.matched == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Add watch rule for /etc/localtime in /etc/audit/rules.d/
      lineinfile:
        path: '{{ all_files[0] }}'
        line: -w /etc/localtime -p wa -k audit_time_rules
        create: true
      when:
        - find_existing_watch_rules_d.matched is defined and find_existing_watch_rules_d.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Check if watch rule for /etc/localtime already exists in /etc/audit/audit.rules
      find:
        paths: /etc/audit/
        contains: ^\s*-w\s+/etc/localtime\s+-p\s+wa(\s|$)+
        patterns: audit.rules
      register: find_existing_watch_audit_rules
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Add watch rule for /etc/localtime in /etc/audit/audit.rules
      lineinfile:
        line: -w /etc/localtime -p wa -k audit_time_rules
        state: present
        dest: /etc/audit/audit.rules
        create: true
      when:
        - find_existing_watch_audit_rules.matched is defined and find_existing_watch_audit_rules.matched
          == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_watch_localtime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82618-0
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82614-9
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for adjtimex for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82614-9
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for adjtimex for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key audit_time_rules
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)audit_time_rules$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/audit_time_rules.rules as the recipient for the
            rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/audit_time_rules.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - adjtimex

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -k audit_time_rules' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_adjtimex
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82614-9
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Set architecture for audit tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82615-6
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for clock_settime for x86 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b32_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b32_rules_d="{{ audit_syscalls_found_b32_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key time-change
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)time-change$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/time-change.rules as the recipient for the rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/time-change.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b32 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b32[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b32_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b32 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b32_audit_rules="{{ audit_syscalls_found_b32_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b32"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b32_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b32_audit_rules < audit_syscalls_number_of_syscalls
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82615-6
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Perform remediation of Audit rules for clock_settime for x86_64 platform
      block:

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/rules.d/
          find:
            paths: /etc/audit/rules.d
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: '*.rules'
          register: audit_syscalls_found_b64_rules_d
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/rules.d/
          set_fact: audit_syscalls_matched_b64_rules_d="{{ audit_syscalls_found_b64_rules_d.results|sum(attribute='matched')|int
            }}"

        - name: Search /etc/audit/rules.d for other rules with the key time-change
          find:
            paths: /etc/audit/rules.d
            contains: ^.*(?:-F key=|-k\s+)time-change$
            patterns: '*.rules'
          register: find_syscalls_files

        - name: Use /etc/audit/rules.d/time-change.rules as the recipient for the rule
          set_fact:
            all_files:
              - /etc/audit/rules.d/time-change.rules
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            == 0

        - name: Use matched file as the recipient for the rule
          set_fact:
            all_files:
              - '{{ find_syscalls_files.files | map(attribute=''path'') | list | first
                }}'
          when: find_syscalls_files.matched is defined and find_syscalls_files.matched
            > 0

        - name: Insert the syscall rule in {{ all_files[0] }}
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_rules_d.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in {{ all_files[0] }}
              lineinfile:
                path: '{{ all_files[0] }}'
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_rules_d < audit_syscalls_number_of_syscalls

        - name: Declare list of syscals
          set_fact:
            syscalls:
              - clock_settime

        - name: Declare number of syscalls
          set_fact: audit_syscalls_number_of_syscalls="{{ syscalls|length|int }}"

        - name: Check existence of syscalls for architecture b64 in /etc/audit/audit.rules
          find:
            paths: /etc/audit
            contains: ^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b64[\s]+)(?:.*(-S[\s]+{{
              item }}[\s]+|([\s]+|[,]){{ item }}([\s]+|[,]))).*(?:-F[\s]+a0=0x0[\s]+)(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$
            patterns: audit.rules
          register: audit_syscalls_found_b64_audit_rules
          loop: '{{ syscalls }}'

        - name: Get number of matched syscalls for architecture b64 in /etc/audit/audit.rules
          set_fact: audit_syscalls_matched_b64_audit_rules="{{ audit_syscalls_found_b64_audit_rules.results|sum(attribute='matched')|int
            }}"

        - name: Insert the syscall rule in /etc/audit/audit.rules
          block:

            - name: 'Construct rule: add rule list, action and arch'
              set_fact: tmpline="-a always,exit -F arch=b64"

            - name: 'Construct rule: add syscalls'
              set_fact: tmpline="{{ tmpline + ' -S ' + item.item }}"
              loop: '{{ audit_syscalls_found_b64_audit_rules.results }}'
              when: item.matched is defined and item.matched == 0

            - name: 'Construct rule: add fields and key'
              set_fact: tmpline="{{ tmpline + ' -F a0=0x0 -k time-change' }}"

            - name: Insert the line in /etc/audit/audit.rules
              lineinfile:
                path: /etc/audit/audit.rules
                line: '{{ tmpline }}'
                create: true
                state: present
          when: audit_syscalls_matched_b64_audit_rules < audit_syscalls_number_of_syscalls
      when:
        - audit_arch == "b64"
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - audit_rules_time_clock_settime
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82615-6
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AC-6(9)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.4.2.b
        - CJIS-5.4.1.1

    - name: Resolve information before writing to audit logs
      block:

        - name: Deduplicate values from /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: false
            regexp: (?i)^\s*log_format\s*=\s*
            state: absent

        - name: Insert correct line to /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: true
            line: log_format = ENRICHED
            state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - auditd_log_format
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82511-7

    - name: Set number of records to cause an explicit flush to audit logs
      block:

        - name: Deduplicate values from /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: false
            regexp: (?i)^\s*freq\s*=\s*
            state: absent

        - name: Insert correct line to /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: true
            line: freq = 50
            state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - auditd_freq
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82512-5

    - name: Write Audit Logs to the Disk
      block:

        - name: Deduplicate values from /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: false
            regexp: (?i)^\s*write_logs\s*=\s*
            state: absent

        - name: Insert correct line to /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: true
            line: write_logs = yes
            state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - auditd_write_logs
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82510-9

    - name: Include Local Events in Audit Logs
      block:

        - name: Deduplicate values from /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: false
            regexp: (?i)^\s*local_events\s*=\s*
            state: absent

        - name: Insert correct line to /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: true
            line: local_events = yes
            state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - auditd_local_events
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82509-1

    - name: Set hostname as computer node name in audit logs
      block:

        - name: Deduplicate values from /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: false
            regexp: (?i)^\s*name_format\s*=\s*
            state: absent

        - name: Insert correct line to /etc/audit/auditd.conf
          lineinfile:
            path: /etc/audit/auditd.conf
            create: true
            line: name_format = hostname
            state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - auditd_name_format
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82513-3

    - name: Ensure aide is installed
      package:
        name: aide
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_aide_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - NIST-800-53-CM-6(a)
        - PCI-DSS-Req-11.5
        - CJIS-5.10.1.3

    - name: Ensure sudo is installed
      package:
        name: sudo
        state: present
      tags:
        - package_sudo_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82523-2
        - NIST-800-53-CM-6(a)

    - name: Ensure sysctl kernel.perf_event_paranoid is set to 2
      sysctl:
        name: kernel.perf_event_paranoid
        value: '2'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_perf_event_paranoid
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82502-6

    - name: Ensure sysctl kernel.kexec_load_disabled is set to 1
      sysctl:
        name: kernel.kexec_load_disabled
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_kexec_load_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82500-0

    - name: Ensure sysctl kernel.yama.ptrace_scope is set to 1
      sysctl:
        name: kernel.yama.ptrace_scope
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_yama_ptrace_scope
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82501-8

    - name: Ensure sysctl kernel.unprivileged_bpf_disabled is set to 1
      sysctl:
        name: kernel.unprivileged_bpf_disabled
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_unprivileged_bpf_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82504-2

    - name: Ensure sysctl kernel.dmesg_restrict is set to 1
      sysctl:
        name: kernel.dmesg_restrict
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_dmesg_restrict
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82499-5
        - NIST-800-53-SI-11(a)
        - NIST-800-53-SI-11(b)
        - NIST-800-171-3.1.5

    - name: Ensure sysctl kernel.core_pattern is set to |/bin/false
      sysctl:
        name: kernel.core_pattern
        value: '|/bin/false'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_core_pattern
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82527-3

    - name: Ensure sysctl net.core.bpf_jit_harden is set to 2
      sysctl:
        name: net.core.bpf_jit_harden
        value: '2'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_core_bpf_jit_harden
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82505-9

    - name: Disable service systemd-coredump
      block:

        - name: Gather the service facts
          service_facts: null

        - name: Disable service systemd-coredump
          systemd:
            name: systemd-coredump.service
            enabled: 'no'
            state: stopped
            masked: 'yes'
          when: '"systemd-coredump.service" in ansible_facts.services'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_systemd-coredump_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82530-7

    - name: Unit Socket Exists - systemd-coredump.socket
      command: systemctl list-unit-files systemd-coredump.socket
      args:
        warn: false
      register: socket_file_exists
      changed_when: false
      ignore_errors: true
      check_mode: false
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_systemd-coredump_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82530-7

    - name: Disable socket systemd-coredump
      systemd:
        name: systemd-coredump.socket
        enabled: 'no'
        state: stopped
        masked: 'yes'
      when:
        - '"systemd-coredump.socket" in socket_file_exists.stdout_lines[1]'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_systemd-coredump_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82530-7

    - name: Disable storing core dump
      block:

        - name: Deduplicate values from /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            regexp: ^\s*Storage\s*=\s*
            state: absent

        - name: Insert correct line to /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            line: Storage=none
            state: present
      tags:
        - coredump_disable_storage
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82528-1

    - name: Disable core dump backtraces
      block:

        - name: Deduplicate values from /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            regexp: ^\s*ProcessSizeMax\s*=\s*
            state: absent

        - name: Insert correct line to /etc/systemd/coredump.conf
          lineinfile:
            path: /etc/systemd/coredump.conf
            create: false
            line: ProcessSizeMax=0
            state: present
      tags:
        - coredump_disable_backtraces
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82529-9

    - name: disable core dumps with limits
      lineinfile:
        dest: /etc/security/limits.conf
        regexp: ^[^#].*core
        line: '*        hard       core      0'
        create: true
      tags:
        - disable_users_coredumps
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82526-5

    - name: Ensure sysctl kernel.kptr_restrict is set to 1
      sysctl:
        name: kernel.kptr_restrict
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_kernel_kptr_restrict
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82498-7
        - NIST-800-53-SC-30
        - NIST-800-53-SC-30(2)
        - NIST-800-53-SC-30(5)
        - NIST-800-53-CM-6(a)

    - name: Ensure sysctl fs.protected_symlinks is set to 1
      sysctl:
        name: fs.protected_symlinks
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_fs_protected_symlinks
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82507-5
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure sysctl fs.protected_hardlinks is set to 1
      sysctl:
        name: fs.protected_hardlinks
        value: '1'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_fs_protected_hardlinks
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82506-7
        - NIST-800-53-CM-6(a)
        - NIST-800-53-AC-6(1)

    - name: Ensure iptables is installed
      package:
        name: iptables
        state: present
      tags:
        - package_iptables_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82522-4
        - NIST-800-53-CM-6(a)

    - name: Ensure sysctl net.ipv4.conf.default.send_redirects is set to 0
      sysctl:
        name: net.ipv4.conf.default.send_redirects
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_send_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82485-4
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.send_redirects is set to 0
      sysctl:
        name: net.ipv4.conf.all.send_redirects
        value: '0'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_send_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82484-7
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.default.log_martians is set
      sysctl:
        name: net.ipv4.conf.default.log_martians
        value: '{{ sysctl_net_ipv4_conf_default_log_martians_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_log_martians
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82487-0
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.icmp_ignore_bogus_error_responses is set
      sysctl:
        name: net.ipv4.icmp_ignore_bogus_error_responses
        value: '{{ sysctl_net_ipv4_icmp_ignore_bogus_error_responses_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_icmp_ignore_bogus_error_responses
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82490-4
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.secure_redirects is set
      sysctl:
        name: net.ipv4.conf.default.secure_redirects
        value: '{{ sysctl_net_ipv4_conf_default_secure_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_secure_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82483-9
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.accept_redirects is set
      sysctl:
        name: net.ipv4.conf.all.accept_redirects
        value: '{{ sysctl_net_ipv4_conf_all_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82469-8
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.log_martians is set
      sysctl:
        name: net.ipv4.conf.all.log_martians
        value: '{{ sysctl_net_ipv4_conf_all_log_martians_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_log_martians
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82486-2
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.accept_source_route is set
      sysctl:
        name: net.ipv4.conf.all.accept_source_route
        value: '{{ sysctl_net_ipv4_conf_all_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82478-9
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.icmp_echo_ignore_broadcasts is set
      sysctl:
        name: net.ipv4.icmp_echo_ignore_broadcasts
        value: '{{ sysctl_net_ipv4_icmp_echo_ignore_broadcasts_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_icmp_echo_ignore_broadcasts
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82491-2
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.all.rp_filter is set
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: '{{ sysctl_net_ipv4_conf_all_rp_filter_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_rp_filter
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82488-8
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.all.secure_redirects is set
      sysctl:
        name: net.ipv4.conf.all.secure_redirects
        value: '{{ sysctl_net_ipv4_conf_all_secure_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_all_secure_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82482-1
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.accept_redirects is set
      sysctl:
        name: net.ipv4.conf.default.accept_redirects
        value: '{{ sysctl_net_ipv4_conf_default_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82470-6
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.tcp_syncookies is set
      sysctl:
        name: net.ipv4.tcp_syncookies
        value: '{{ sysctl_net_ipv4_tcp_syncookies_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_tcp_syncookies
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82492-0
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5(1)
        - NIST-800-53-SC-5(2)
        - NIST-800-53-SC-5(3)(a)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv4.conf.default.rp_filter is set
      sysctl:
        name: net.ipv4.conf.default.rp_filter
        value: '{{ sysctl_net_ipv4_conf_default_rp_filter_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_rp_filter
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82489-6
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv4.conf.default.accept_source_route is set
      sysctl:
        name: net.ipv4.conf.default.accept_source_route
        value: '{{ sysctl_net_ipv4_conf_default_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv4_conf_default_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82479-7
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-SC-5
        - NIST-800-53-SC-7(a)
        - NIST-800-171-3.1.20
        - CJIS-5.10.1.1

    - name: Ensure sysctl net.ipv6.conf.default.accept_redirects is set
      sysctl:
        name: net.ipv6.conf.default.accept_redirects
        value: '{{ sysctl_net_ipv6_conf_default_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_default_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82477-1
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.default.accept_ra is set
      sysctl:
        name: net.ipv6.conf.default.accept_ra
        value: '{{ sysctl_net_ipv6_conf_default_accept_ra_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_default_accept_ra
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82468-0
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.all.accept_redirects is set
      sysctl:
        name: net.ipv6.conf.all.accept_redirects
        value: '{{ sysctl_net_ipv6_conf_all_accept_redirects_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_all_accept_redirects
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82471-4
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.all.accept_ra is set
      sysctl:
        name: net.ipv6.conf.all.accept_ra
        value: '{{ sysctl_net_ipv6_conf_all_accept_ra_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_all_accept_ra
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82467-2
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.default.accept_source_route is set
      sysctl:
        name: net.ipv6.conf.default.accept_source_route
        value: '{{ sysctl_net_ipv6_conf_default_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_default_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82481-3
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Ensure sysctl net.ipv6.conf.all.accept_source_route is set
      sysctl:
        name: net.ipv6.conf.all.accept_source_route
        value: '{{ sysctl_net_ipv6_conf_all_accept_source_route_value }}'
        state: present
        reload: true
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sysctl_net_ipv6_conf_all_accept_source_route
        - medium_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - reboot_required
        - CCE-82480-5
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.20

    - name: Disable SSH Support for .rhosts Files
      block:

        - name: Deduplicate values from /etc/ssh/sshd_config
          become: yes
          lineinfile:
            path: /etc/ssh/sshd_config
            create: false
            regexp: (?i)^\s*IgnoreRhosts\s+
            state: absent

        - name: Insert correct line to /etc/ssh/sshd_config
          become: yes
          lineinfile:
            path: /etc/ssh/sshd_config
            create: true
            line: IgnoreRhosts yes
            state: present
            insertbefore: ^[#\s]*Match
            validate: /usr/sbin/sshd -t -f %s
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - sshd_disable_rhosts
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82665-1
        - NIST-800-53-AC-17(a)
        - NIST-800-53-CM-7(a)
        - NIST-800-53-CM-7(b)
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6

    - name: Ensure usbguard is installed
      package:
        name: usbguard
        state: present
      tags:
        - package_usbguard_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82524-0

    - name: Enable service usbguard
      block:

        - name: Gather the package facts
          package_facts:
            manager: auto

        - name: Enable service usbguard
          service:
            name: usbguard
            enabled: 'yes'
            state: started
          when:
            - '"usbguard" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_usbguard_enabled
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82537-2

    - name: Enable service rngd
      block:

        - name: Gather the package facts
          package_facts:
            manager: auto

        - name: Enable service rngd
          service:
            name: rngd
            enabled: 'yes'
            state: started
          when:
            - '"rng-tools" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_rngd_enabled
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82535-6

    - name: Ensure fapolicyd is installed
      package:
        name: fapolicyd
        state: present
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - package_fapolicyd_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82533-1
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SI-4(22)

    - name: Enable service fapolicyd
      block:

        - name: Gather the package facts
          package_facts:
            manager: auto

        - name: Enable service fapolicyd
          service:
            name: fapolicyd
            enabled: 'yes'
            state: started
          when:
            - '"fapolicyd" in ansible_facts.packages'
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type != "docker"
      tags:
        - service_fapolicyd_enabled
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - no_reboot_needed
        - CCE-82534-9
        - NIST-800-53-CM-6(a)
        - NIST-800-53-SI-4(22)

